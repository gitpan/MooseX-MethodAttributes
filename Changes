0.15     Sun, Jul 26 18:02:05 2009 +0100
  * Fix test which was failing in some cases and additional test cases.

  * No other changes on the dev release.

0.14_01  Thu, Jul 16 20:04:04 2009 +0100
  * Add TODO tests for role combination with method attributes, proving that this doesn't work.

  * Add nasty hack to allow the application of roles with method attributes to anon classes to
    work if the user does a special handwave. This is less than optimum, see big block comment
    in the code. :/

0.14     Sun, Jun  7 01:51:49 2009 +0100
  * Fix bugs with composing roles with method attributes into other
    roles with method attributes + tests

0.13     Thu, 28 May 2009 01:19:00 +0100
  * Add Test::More and Test::Exception to requirements for RT#46395
    and RT#46396

0.12     Mon, 25 May 2009 19:33:30 +0100
  * Add additional tests for role composition behavior.
  * Add an error message if someone tries to exclude or alias methods
    from a role with attributes, which currently doesn't work.
  * Add tests for this error, and tests for behavior if aliasing did work.

0.11_03  Mon, 25 May 2009 00:06:50 +0100
  * Fix overenthusiastic meta trait application which caused
    classes which already had methods with attributes to have their
    attributes wiped out.

0.11_02  Thu, 21 May 2009 01:46:47 +0100
  * Add support for use Moose::Role -traits => 'MethodAttributes'
    if we've already been loaded.
  * Add support for composing a role containg methods with attributes into
    another role.

0.11_01  Sun, 17 May 2009 23:50:44 +0100
  * Do not apply metaclass roles unless needed.
  * Add MooseX::MethodAttributes::Role::Meta::Role, for roles which
    contain methods with attributes.
  * Split attribute container functionality out into
    MooseX::MethodAttributes::Role::Meta::Map.

0.11  Fri, 15 May 2009 18:02:27 +0200
  * Depend on Moose 079 to prevent metaclass incompatibility failure.

0.10  Thu, 14 May 2009 00:08:30 +0100
  * Stop non Moose classes which inherit MooseX::MethodAttributes::Inheritable
    and which define a sub meta from throwing an exception.

0.09  Tue, 28 Apr 2009 09:47:28 +0100
  * Use modifiers in the metaclass role to catch modifiers being applied
    to subs, and apply our wrapped method role to the generated method
    instance. This is horrible, but appears to be a sane way to avoid
    that fact that method metaclasses applied to one class aren't inherited.

0.08  Sat, 25 Apr 2009 16:30:00 +0100
  * Fix get_nearest_methods_with_attributes to deal with wrapped methods.
    - Add tests for this, and how Catalyst uses the module
  * Add TODO tests showing that method metaclass inheritance (or lacktherof)
    into subclasses causes us to fail to do the right thing.

0.07  Sat, 25 Apr 2009 13:47:05 +0100
  * Add the get_nearest_methods_with_attributes method.

0.06  Sun, 19 Apr 2009 23:03:06 +0100
  * Fix bug when using base, as Moose doesn't automatically inherit the
    method metaclass from your parent class unless you use the 'extends'
    syntax.
  * Package on a different machine, due to reported unarchiving issues
    on win32.

0.05  Wed,  1 Apr 2009 21:40:05 +0100
  * Ensure that we have an initialised metaclass to apply roles to in
    AttrContainer::Inheritable, fixing bugs with non-moose base classes
    which have not has a metaclass initialised for them.

0.04  Thu, 26 Feb 2009 22:47:18 +0100
  * Depend on an MX::Types version with support for parameterisation.
  * Add tests for behaviour of get_all_methods_with_attributes and method
    modifiers.

0.03  Thu, 19 Feb 2009 08:13:18 +0100
  * Implement metaclass methods for getting all meta methods with attributes.

0.02  Sat, 14 Feb 2009 22:17:56 +0100
  * Depend on Moose 0.70 for wrapped_method_metaclass_roles support.
  * Apply a role to wrapped method metaclasses to support getting
    attributes of wrapped methods.
  * Add MooseX::MethodAttributes::Inherited as a way of capturing method
    attributes without explicitly using MooseX::MethodAttributes in every
    class.

0.01  Fri, 13 Feb 2009 22:21:11 +0100
  * Initial release.
